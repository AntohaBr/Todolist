{"version":3,"sources":["serviceWorker.ts","features/Application/selectors.ts","api/todolists-api.ts","features/Auth/selectors.tsx","features/CommonActions/App.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","utils/redux-utils.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","api/types.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","selectStatus","state","app","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","selectIsLoggedIn","auth","isLoggedIn","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","i","login","createAsyncThunk","param","res","resultCode","err","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","useAppDispatch","useDispatch","useActions","actions","useMemo","bindActionCreators","Login","useSelector","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","variant","color","authReducer","reducer","initializeApp","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","style","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","key","className","position","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","padding","paddingTop","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","allTodolistTasks","width","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":";2SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfOC,EAAe,SAACC,GAAuB,OAAKA,EAAMC,IAAIC,QACtDC,EAAsB,SAACH,GAAuB,OAAKA,EAAMC,IAAIG,e,gBCOpEC,E,OAAWC,EAAMC,OAAO,aAC1BC,QAAS,iDARI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CAWNC,EACG,WACR,OAAON,EAASO,IAAoB,eAF/BD,EAIK,SAACE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAL5EF,EAOK,SAACI,GACX,OAAOV,EAASW,OAAM,qBAA6BD,KAR9CJ,EAUK,SAACI,EAAYF,GACvB,OAAOR,EAASY,IAAG,qBAA6BF,GAAM,CAACF,MAAOA,KAXzDF,EAaD,SAACO,GACL,OAAOb,EAASO,IAAG,qBAAiCM,EAAU,YAdzDP,EAgBC,SAACO,EAAoBC,GAC3B,OAAOd,EAASW,OAAM,qBAA6BE,EAAU,kBAAUC,KAjBlER,EAmBC,SAACO,EAAoBE,GAC3B,OAAOf,EAASS,KAAI,qBAAiDI,EAAU,UAAU,CAACL,MAAOO,KApB5FT,EAsBC,SAACO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAG,qBAAuCC,EAAU,kBAAUC,GAAUE,IAInFC,EACJ,SAACC,GACF,OAAOlB,EAASS,KAAwC,aAAcS,IAFjED,EAIH,WACF,OAAOjB,EAASW,OAA0C,eALrDM,EAOP,WACE,OAAOjB,EAASO,IAAgE,YClD3EY,EAAmB,SAACxB,GAAuB,OAAKA,EAAMyB,KAAKC,Y,gGCK3DC,EAAa,CACtBC,aALiBC,YAA4C,2BAM7DC,YALgBD,YAAuC,2BCM9CE,EAA4B,SAAIR,EACAS,GACsB,IAAtBC,IAAS,yDAKlD,OAJIA,GACAD,EAASE,SAASP,EAAWG,YAAY,CAACK,MAAOZ,EAAKa,SAASC,OAASd,EAAKa,SAAS,GAAK,yBAE/FJ,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,YAC5C8B,EAASM,gBAAgB,CAACC,OAAQhB,EAAKa,SAAUI,aAAcjB,EAAKiB,gBAGlEC,EAAgC,SAACN,EACAH,GACsB,IAAtBC,IAAS,yDAMnD,OALIA,GACAD,EAASE,SAASP,EAAWG,YAAY,CAACK,MAAOA,EAAMO,QAAUP,EAAMO,QAAU,yBAErFV,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,YAE5C8B,EAASM,gBAAgB,CAACC,OAAQ,CAACJ,EAAMO,SAAUF,kBAAcG,K,aC5B5E,kmGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAOA,IAAOhB,EAAgBD,EAAhBC,aAGMiB,EAAQC,YACiE,aAAY,uCAC9F,WAAOC,EAAOf,GAAQ,yEACkC,OAApDA,EAASE,SAASN,EAAa,CAAC1B,OAAQ,aAAY,kBAE9BoB,EAAcyB,GAAM,OAA7B,GACmB,KADtBC,EAAG,QACDzB,KAAK0B,WAAgB,iBAC6B,OAAtDjB,EAASE,SAASN,EAAa,CAAC1B,OAAQ,eAAc,oDAG/C6B,EAA0BiB,EAAIzB,KAAMS,IAAS,gCAG/C,OAH+C,0BAGlDkB,EAAG,uBACFT,EAA8BS,EAAKlB,IAAS,0DAE1D,qDAf6F,IAiBrFmB,EAASL,YAAiB,cAAa,uCAAE,WAAOC,EAAOf,GAAQ,yEACpB,OAApDA,EAASE,SAASN,EAAa,CAAC1B,OAAQ,aAAY,kBAE9BoB,IAAgB,OAAzB,GACmB,KADtB0B,EAAG,QACDzB,KAAK0B,WAAgB,iBAC6B,OAAtDjB,EAASE,SAASN,EAAa,CAAC1B,OAAQ,eAAc,oDAG/C6B,EAA0BiB,EAAIzB,KAAMS,IAAS,gCAG/C,OAH+C,0BAGlDkB,EAAG,uBACFT,EAA8BS,EAAKlB,IAAS,0DAE1D,qDAdmD,IAiBvCoB,EAAe,CACxBP,QACAM,UAISE,EAAQC,YAAY,CAC7BC,KAAM,OACNC,aAAc,CACV9B,YAAY,GAEhB+B,SAAU,CACNC,cAAa,SAAC1D,EAAO2D,GACjB3D,EAAM0B,WAAaiC,EAAOC,QAAQC,QAG1CC,cAAe,SAAAC,GACXA,EACKC,QAAQnB,EAAMoB,WAAW,SAACjE,GACvBA,EAAM0B,YAAa,KAEtBsC,QAAQb,EAAOc,WAAW,SAACjE,GACxBA,EAAM0B,YAAa,Q,QC9DtBwC,EAAiB,WAAH,OAASC,eAE7B,SAASC,EAAmDC,GAC/D,IAAMnC,EAAWgC,IAMjB,OAJqBI,mBAAQ,WACzB,OAAOC,YAAmBF,EAASnC,KACpC,CAACmC,EAASnC,I,aCZjB,kmGAAAU,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAiBO,IAAM4B,EAAQ,WACjB,IAAMtC,EAAWgC,IAEXxC,EAAa+C,YAAYjD,GAEzBkD,EAASC,YAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBAUnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAS,WAAD,4BAAE,WAAOL,EAAwBM,GAA4C,+FACtDjD,EAASkD,EAAYvC,MAAMgC,IAAS,KAAD,EAAxDQ,EAAY,OAEdxC,EAAMyC,SAASxF,MAAMuF,KACG,QAAxB,EAAIA,EAAazB,eAAO,OAAc,QAAd,EAApB,EAAsBpB,oBAAY,WAAd,EAApB,EAAoCH,UAC9BF,EAA4B,QAAvB,EAAGkD,EAAazB,eAAO,aAApB,EAAsBpB,aAAa,GACjD2C,EAAcI,cAAcpD,EAAMqD,MAAOrD,EAAMA,QAEtD,2CACJ,qDATQ,KAYb,OAAIT,EACO,kBAAC,IAAQ,CAAC+D,GAAI,MAGlB,kBAACC,EAAA,EAAI,CAACC,WAAS,EAACC,QAAQ,UAC3B,kBAACF,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GACX,0BAAMZ,SAAUR,EAAOqB,cACnB,kBAACC,EAAA,EAAW,KACR,kBAACC,EAAA,EAAS,KACN,uDAC6B,uBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,uBAAqB,SAE3E,sEAGA,yDAEA,8CAIJ,kBAACC,EAAA,EAAS,KACN,kBAACC,EAAA,EAAS,eACNC,MAAM,QACNC,OAAO,UACH9B,EAAO+B,cAAc,WAE5B/B,EAAOnC,OAAOuC,MAAQ,6BAAMJ,EAAOnC,OAAOuC,OAAe,KAC1D,kBAACwB,EAAA,EAAS,eACNI,KAAK,WACLH,MAAM,WACNC,OAAO,UACH9B,EAAO+B,cAAc,cAE5B/B,EAAOnC,OAAOwC,SAAW,6BAAML,EAAOnC,OAAOwC,UAAkB,KAChE,kBAAC4B,EAAA,EAAgB,CACbJ,MAAO,cACPK,QAAS,kBAACC,EAAA,EAAQ,iBACVnC,EAAO+B,cAAc,cAAa,CACtCK,QAASpC,EAAOG,OAAOI,gBAG/B,kBAAC8B,EAAA,EAAM,CAACL,KAAM,SAAUM,QAAS,YAAaC,MAAO,WAAU,eC5FjF7B,EAAW,2BACVhC,GACAC,EAAMgB,SAGP6C,GAAc7D,EAAM8D,Q,cCT1B,mmGAAAvE,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAKA,IAAMwE,GAAgBtE,YAAiB,4BAA2B,wCAAE,WAAOC,EAAM,GAAD,wEAAW,OAARb,EAAQ,EAARA,SAAQ,SACrEZ,IAAY,OACF,IADnB,OACDC,KAAK0B,YACTf,EAASkD,EAAY1B,cAAc,CAACG,OAAO,KAG9C,2CACJ,qDAPiE,IAUrDT,GAAe,CACxBgE,kBAIS/D,GAAQC,YAAY,CAC7BC,KAAM,MACNC,aAAc,CACVtD,OAAQ,OACRiC,MAAO,KACP/B,eAAe,GAEnBqD,SAAU,GACVK,cAAe,SAAAC,GACXA,EACKC,QAAQoD,GAAcnD,WAAW,SAACjE,EAAO2D,GACtC3D,EAAMI,eAAgB,KAEzB4D,QAAQrC,EAAWC,cAAc,SAAC5B,EAAO2D,GACtC3D,EAAME,OAASyD,EAAOC,QAAQ1D,UAEjC8D,QAAQrC,EAAWG,aAAa,SAAC9B,EAAO2D,GACrC3D,EAAMmC,MAAQwB,EAAOC,QAAQzB,YCjCvCkF,GAAahE,GAAM8D,QACnB9C,GAAUhB,GAAMgB,QAChB1C,GAAU,2BACT0C,IACAjB,I,cCRP,mmGAAAR,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQASA,IAAOhB,GAAgBD,EAAhBC,aAGD0F,GAAmBxE,YACxB,2BAA0B,wCAAE,WAAOC,EAAOf,GAAQ,0EACK,OAApDA,EAASE,SAASN,GAAa,CAAC1B,OAAQ,aAAY,kBAE9BS,IAA2B,OACS,OADhDqC,EAAG,OACThB,EAASE,SAASN,GAAa,CAAC1B,OAAQ,eAAc,kBAC/C,CAACqH,UAAWvE,EAAIzB,OAAK,OAEnB,OAFmB,yBAEtB2B,EAAG,uBACFT,EAA8BS,EAAKlB,IAAS,yDAE1D,qDAV0B,IAYrBwF,GAAmB1E,YAAqD,2BAA0B,wCACpG,WAAO5B,EAAW,GAAD,wEAE4D,OAFzDgB,EAAQ,EAARA,SAAyB,EAAfI,gBAC1BJ,EAASN,GAAa,CAAC1B,OAAQ,aAC/BgC,EAASuF,GAA2B,CAAC1G,GAAIG,EAAYhB,OAAQ,aAAY,SACnES,EAA4BO,GAAW,OACA,OAA7CgB,EAASN,GAAa,CAAC1B,OAAQ,eAAc,kBACtC,CAACa,GAAIG,IAAW,2CAC1B,qDAPmG,IASlGwG,GAAgB5E,YACrB,wBAAuB,wCAAE,WAAOjC,EAAOmB,GAAQ,0EACQ,OAApDA,EAASE,SAASN,GAAa,CAAC1B,OAAQ,aAAY,kBAE9BS,EAA4BE,GAAM,OAA3C,GACmB,KADtBmC,EAAG,QACDzB,KAAK0B,WAAgB,iBAC6B,OAAtDjB,EAASE,SAASN,GAAa,CAAC1B,OAAQ,eAAc,kBAC/C,CAACyH,SAAU3E,EAAIzB,KAAKA,KAAKsE,OAAK,iCAE9B9D,EAA0BiB,EAAIzB,KAAMS,GAAU,IAAM,gCAGtD,OAHsD,0BAGzDkB,EAAG,uBACFT,EAA8BS,EAAKlB,GAAU,IAAM,0DAEjE,qDAduB,IAgBlB4F,GAAwB9E,YAAiB,gCAA+B,wCAC1E,WAAOC,EAAsCf,GAAQ,mGAE3BrB,EAA4BoC,EAAMhC,GAAIgC,EAAMlC,OAAM,OAA3D,GACmB,KADtBmC,EAAG,QACDzB,KAAK0B,WAAgB,gBAC6B,OAAtDjB,EAASE,SAASN,GAAa,CAAC1B,OAAQ,eAAc,kBAC/C,CAACa,GAAIgC,EAAMhC,GAAIF,MAAOkC,EAAMlC,QAAM,gCAElCkB,EAA0BiB,EAAIzB,KAAMS,IAAS,gCAG/C,OAH+C,0BAGlDkB,EAAG,uBACFT,EAA8BS,EAAKlB,GAAU,IAAM,0DAEjE,qDAdyE,IAiBjEoB,GAAe,CACxBkE,oBACAE,oBACAE,iBACAE,0BAISvE,GAAQC,YAAY,CAC7BC,KAAM,YACNC,aAAc,GACdC,SAAU,CACNoE,qBAAoB,SAAC7H,EAAO2D,GACxB,IAAMmE,EAAQ9H,EAAM+H,WAAU,SAAAC,GAAE,OAAIA,EAAGjH,KAAO4C,EAAOC,QAAQ7C,MAC7Df,EAAM8H,GAAOG,OAAStE,EAAOC,QAAQqE,QAEzCR,2BAA0B,SAACzH,EAAO2D,GAC9B,IAAMmE,EAAQ9H,EAAM+H,WAAU,SAAAC,GAAE,OAAIA,EAAGjH,KAAO4C,EAAOC,QAAQ7C,MAC7Df,EAAM8H,GAAOI,aAAevE,EAAOC,QAAQ1D,SAGnD4D,cAAe,SAAAC,GACXA,EACKC,QAAQsD,GAAiBrD,WAAW,SAACjE,EAAO2D,GACzC,OAAOA,EAAOC,QAAQ2D,UAAUY,KAAI,SAACH,GAAE,kCAAUA,GAAE,IAAEC,OAAQ,MAAOC,aAAc,eAErFlE,QAAQwD,GAAiBvD,WAAW,SAACjE,EAAO2D,GACzC,IAAMmE,EAAQ9H,EAAM+H,WAAU,SAAAC,GAAE,OAAIA,EAAGjH,KAAO4C,EAAOC,QAAQ7C,MACzD+G,GAAS,GACT9H,EAAMoI,OAAON,EAAO,MAG3B9D,QAAQ0D,GAAczD,WAAW,SAACjE,EAAO2D,GACtC3D,EAAMqI,QAAQ,2BAAI1E,EAAOC,QAAQ+D,UAAQ,IAAEM,OAAQ,MAAOC,aAAc,aAE3ElE,QAAQ4D,GAAsB3D,WAAW,SAACjE,EAAO2D,GAC9C,IAAMmE,EAAQ9H,EAAM+H,WAAU,SAAAC,GAAE,OAAIA,EAAGjH,KAAO4C,EAAOC,QAAQ7C,MAC7Df,EAAM8H,GAAOjH,MAAQ8C,EAAOC,QAAQ/C,YAM7C,GAA2DwC,GAAMgB,QAApCoD,IAAF,GAApBI,qBAAgD,GAA1BJ,4B,cC/GpC,mmGAAA7E,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQASA,IAGa0F,GAAaxF,YACzB,mBAAkB,wCAAE,WAAO5B,EAAYc,GAAQ,4EACmB,OAA/DA,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,aAAY,kBAEzCS,EAAsBO,GAAW,OAEc,OAF3D8B,EAAG,OACHuF,EAAQvF,EAAIzB,KAAKiH,MACvBxG,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,eAAc,kBAC1D,CAACqI,QAAOrH,eAAW,QAEjB,OAFiB,0BAEpBgC,EAAG,uBACFT,EAA8BS,EAAKlB,IAAS,0DAE1D,qDAXkB,IAaNyG,GAAa3F,YACV,mBAAkB,wCAAE,WAAOC,EAAOf,GAAQ,kFAChDrB,EAAwBoC,EAAM7B,WAAY6B,EAAM5B,QAAO,gCACtD,CAACA,OAAQ4B,EAAM5B,OAAQD,WAAY6B,EAAM7B,aAAW,2CAC9D,qDAHiC,IAKrBwH,GAAU5F,YAA8E,gBAAe,wCAChH,WAAOC,EAAOf,GAAQ,0EAC6C,OAA/DA,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,aAAY,kBAEzCS,EAAwBoC,EAAM7B,WAAY6B,EAAMlC,OAAM,OAA/D,GACmB,KADtBmC,EAAG,QACDzB,KAAK0B,WAAgB,iBACwC,OAAjEjB,EAASE,SAASP,EAAWC,aAAa,CAAC1B,OAAQ,eAAc,kBAC1D8C,EAAIzB,KAAKA,KAAKsE,MAAI,QAE2B,OAApD9D,EAA0BiB,EAAIzB,KAAMS,GAAU,GAAM,kBAC7CA,EAASM,gBAAgB,CAACC,OAAQS,EAAIzB,KAAKa,SAAUI,aAAcQ,EAAIzB,KAAKiB,gBAAc,gCAG5F,OAH4F,0BAG/FU,EAAG,uBACFT,EAA8BS,EAAKlB,GAAU,IAAM,0DAEjE,qDAhB+G,IAkBvG2G,GAAa7F,YAAiB,mBAAkB,wCAAE,WAC3DC,EAAiFf,GAAQ,gFAGd,GAFrEhC,EAAQgC,EAAS4G,WAEjBC,EAAO7I,EAAMuI,MAAMxF,EAAM7B,YAAY4H,MAAK,SAAAC,GAAC,OAAIA,EAAEhI,KAAOgC,EAAM5B,UAC1D,CAAD,wCACEa,EAASM,gBAAgB,gCAA8B,OAUhD,OAPZ0G,EAA6B,aAC/BC,SAAUJ,EAAKI,SACfC,YAAaL,EAAKK,YAClBC,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBvI,MAAOgI,EAAKhI,MACZX,OAAQ2I,EAAK3I,QACV6C,EAAM1B,OAAK,SAGAV,EAAwBoC,EAAM7B,WAAY6B,EAAM5B,OAAQ6H,GAAS,OAA1E,GAAHhG,EAAG,gBAEuB,IAAxBA,EAAIzB,KAAK0B,WAAgB,0CAClBF,GAAK,iCAELhB,EAA0BiB,EAAIzB,KAAMS,IAAS,gCAG/C,OAH+C,0BAGlDkB,EAAG,uBACFT,EAA8BS,EAAKlB,IAAS,0DAE1D,qDA9B4D,IAiChDoB,GAAe,CACxBkF,cACAG,cACAC,WACAC,eAIStF,GAAQC,YAAY,CAC7BC,KAAM,QACNC,aApFiC,GAqFjCC,SAAU,GACVK,cAAe,SAACC,GACZA,EACKC,QAAQqF,GAAsB3B,cAAczD,WAAW,SAACjE,EAAO2D,GAC5D3D,EAAM2D,EAAOC,QAAQ+D,SAAS5G,IAAM,MAEvCiD,QAAQqF,GAAsB7B,iBAAiBvD,WAAW,SAACjE,EAAO2D,UACxD3D,EAAM2D,EAAOC,QAAQ7C,OAE/BiD,QAAQqF,GAAsB/B,iBAAiBrD,WAAW,SAACjE,EAAO2D,GAC/DA,EAAOC,QAAQ2D,UAAU+B,SAAQ,SAACtB,GAC9BhI,EAAMgI,EAAGjH,IAAM,SAGtBiD,QAAQsE,GAAWrE,WAAW,SAACjE,EAAO2D,GACnC3D,EAAM2D,EAAOC,QAAQ1C,YAAcyC,EAAOC,QAAQ2E,SAErDvE,QAAQyE,GAAWxE,WAAW,SAACjE,EAAO2D,GACnC,IAAM4E,EAAQvI,EAAM2D,EAAOC,QAAQ1C,YAC7B4G,EAAQS,EAAMR,WAAU,SAAAgB,GAAC,OAAIA,EAAEhI,KAAO4C,EAAOC,QAAQzC,UACvD2G,GAAS,GACTS,EAAMH,OAAON,EAAO,MAG3B9D,QAAQ0E,GAAQzE,WAAW,SAACjE,EAAO2D,GAChC3D,EAAM2D,EAAOC,QAAQ2F,YAAYlB,QAAQ1E,EAAOC,YAEnDI,QAAQ2E,GAAW1E,WAAW,SAACjE,EAAO2D,GACnC,IAAM4E,EAAQvI,EAAM2D,EAAOC,QAAQ1C,YAC7B4G,EAAQS,EAAMR,WAAU,SAAAgB,GAAC,OAAIA,EAAEhI,KAAO4C,EAAOC,QAAQzC,UACvD2G,GAAS,IACTS,EAAMT,GAAM,2BAAOS,EAAMT,IAAWnE,EAAOC,QAAQvC,c,2CC7HvE,mmGAAAuB,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAWO,ICUK4G,GAOAC,GDjBCC,GAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAO,EAAPA,QAAQ,EAAD,EAAEC,gBAAQ,OAAQ,EACtE,EAAwBC,mBAAS,IAAG,oBAA/BlJ,EAAK,KAAEmJ,EAAQ,KACpB,EAAwBD,mBAAwB,MAAK,oBAAhD5H,EAAK,KAAE8H,EAAQ,KAEdC,EAAc,wCAAG,+EACE,KAAjBrJ,EAAMsJ,OACNN,EAAQhJ,EAAO,CAACoJ,WAAUD,aAE1BC,EAAS,qBACZ,2CACJ,kBANmB,mCAqBpB,OAAO,6BACH,kBAAC3D,EAAA,EAAS,CAACU,QAAQ,WACR8C,SAAUA,EACV3H,QAASA,EACT0B,MAAOhD,EACPuJ,SAlBS,SAACC,GACrBL,EAASK,EAAEC,cAAczG,QAkBd0G,WAfW,SAACF,GACT,OAAVlI,GACA8H,EAAS,MAEM,KAAfI,EAAEG,UACFN,KAWO3D,MAAM,QACNkE,WAAYtI,IAEvB,kBAACuI,GAAA,EAAU,CAACzD,MAAM,UAAU0D,QAAST,EAAgBJ,SAAUA,EAAUc,MAAO,CAACC,WAAY,QACzF,kBAACC,GAAA,EAAM,W,SEtCNC,GAAepB,IAAMC,MAAK,SAAUoB,GAC7CC,QAAQC,IAAI,uBACZ,MAA8BnB,oBAAS,GAAM,oBAAxCoB,EAAQ,KAAEC,EAAW,KAC1B,EAAwBrB,mBAASiB,EAAMnH,OAAM,oBAAxChD,EAAK,KAAEmJ,EAAQ,KAcpB,OAAOmB,EACD,kBAAC7E,EAAA,EAAS,CAACzC,MAAOhD,EAAOuJ,SALX,SAACC,GACjBL,EAASK,EAAEC,cAAczG,QAIyBwH,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZJ,EAAMZ,SAASvJ,MAQb,0BAAM0K,cAda,WACrBH,GAAY,GACZpB,EAASgB,EAAMnH,SAY2BmH,EAAMnH,U,qBDFvD,SALW2F,OAAY,aAAZA,IAAY,2BAAZA,IAAY,yBAAZA,IAAY,iBAKvB,CALWA,QAAY,KAavB,SANWC,OAAc,aAAdA,IAAc,mBAAdA,IAAc,WAAdA,IAAc,uBAAdA,IAAc,iBAMzB,CANWA,QAAc,KEdnB,IAAM+B,GAAO7B,IAAMC,MAAK,SAACoB,GAC5B,MAAiC5G,EAAWqH,IAArC9C,EAAU,EAAVA,WAAYF,EAAU,EAAVA,WAEbiD,EAAiBC,uBAAY,kBAAMlD,EAAW,CAACtH,OAAQ6J,EAAMnC,KAAK9H,GAAIG,WAAY8J,EAAM9J,eAC1F,CAAC8J,EAAMnC,KAAK9H,GAAIiK,EAAM9J,WAAWuH,IAE/BmD,EAAkBD,uBAAY,SAACtB,GACjC1B,EAAW,CACPxH,OAAQ6J,EAAMnC,KAAK9H,GACnBM,MAAO,CAACnB,OAAQmK,EAAEC,cAAcxD,QAAU0C,GAAaqC,UAAYrC,GAAasC,KAChF5K,WAAY8J,EAAM9J,eAEvB,CAAC8J,EAAMnC,KAAK9H,GAAIiK,EAAM9J,WAAWyH,IAE9BoD,EAAuBJ,uBAAY,SAACK,GACtCrD,EAAW,CACPxH,OAAQ6J,EAAMnC,KAAK9H,GACnBM,MAAO,CAACR,MAAOmL,GACf9K,WAAY8J,EAAM9J,eAEvB,CAAC8J,EAAMnC,KAAK9H,GAAIiK,EAAM9J,WAAWyH,IAEpC,OAAO,yBAAKsD,IAAKjB,EAAMnC,KAAK9H,GAAImL,UAAWlB,EAAMnC,KAAK3I,SAAWsJ,GAAaqC,UAAY,UAAY,GAC1FjB,MAAO,CAACuB,SAAU,aAC1B,kBAACtF,EAAA,EAAQ,CACLC,QAASkE,EAAMnC,KAAK3I,SAAWsJ,GAAaqC,UAC5C5E,MAAM,UACNmD,SAAUwB,IAGd,kBAACb,GAAY,CAAClH,MAAOmH,EAAMnC,KAAKhI,MAAOuJ,SAAU2B,IACjD,kBAACrB,GAAA,EAAU,CAAC0B,KAAM,QAASzB,QAASe,EAAgBd,MAAO,CAACuB,SAAU,WAAYE,IAAK,MAAOC,MAAO,QACjG,kBAACC,GAAA,EAAM,CAACC,SAAU,e,0BC9C9B,mmGAAA5J,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAkBO,IAAM6J,GAAW9C,IAAMC,MAAK,YAAgD,IAAD,IAApC8C,YAAI,OAAQ,EAAK1B,EAAK,mBACzD1C,EAAclE,EAAWqH,IAAzBnD,WACP,EAAwElE,EAAWuI,IAA5E9E,EAAoB,EAApBA,qBAAsBL,EAAgB,EAAhBA,iBAAkBI,EAAqB,EAArBA,sBAEzC1F,EAAWgC,IAEjB0I,qBAAU,WACFF,GAGJpE,EAAW0C,EAAMrD,SAAS5G,MAC3B,CAAC2L,EAAKpE,EAAW0C,EAAMrD,SAAS5G,KAEnC,IAAM8L,EAAkBlB,sBAAW,wCAAC,WAAO9K,EAAeiM,GAAmC,kFAEV,OAA3EC,EAAQtB,GAAa/C,QAAQ,CAAC7H,MAAOA,EAAOK,WAAY8J,EAAMrD,SAAS5G,KAAI,SACpDmB,EAAS6K,GAAM,OAApC1H,EAAY,OAEdoG,GAAa/C,QAAQpD,SAASxF,MAAMuF,IACZ,QAAxB,EAAIA,EAAazB,eAAO,OAAQ,QAAR,EAApB,EAAsBrB,cAAM,WAAR,EAApB,EAA8BF,SACxB2K,EAAmC,QAAvB,EAAG3H,EAAazB,eAAO,aAApB,EAAsBrB,OAAO,GAClDuK,EAAO7C,SAAS+C,IAEhBF,EAAO7C,SAAS,sBAGpB6C,EAAO9C,SAAS,IACnB,2CAEJ,qDAhBkC,GAgBhC,CAACgB,EAAMrD,SAAS5G,GAAGmB,IAKhB+K,EAAsBtB,uBAAY,SAAC9K,GACrC+G,EAAsB,CAAC7G,GAAIiK,EAAMrD,SAAS5G,GAAIF,MAAOA,MACtD,CAAC+G,EAAuBoD,EAAMrD,SAAS5G,KAEpCmM,EAA6BvB,uBAAY,SAAC1D,GAAwB,OAAKJ,EAAqB,CAC9FI,OAAQA,EACRlH,GAAIiK,EAAMrD,SAAS5G,OACnB,CAAC8G,EAAsBmD,EAAMrD,SAAS5G,KAEtCoM,EAAmBnC,EAAMzC,MAEC,WAA1ByC,EAAMrD,SAASM,SACfkF,EAAmBnC,EAAMzC,MAAMN,QAAO,SAAAc,GAAC,OAAIA,EAAE7I,SAAWsJ,GAAasC,QAE3C,cAA1Bd,EAAMrD,SAASM,SACfkF,EAAmBnC,EAAMzC,MAAMN,QAAO,SAAAc,GAAC,OAAIA,EAAE7I,SAAWsJ,GAAaqC,cAGzE,IAAMuB,EAAqB,SAACC,EACApG,EACAqG,GACxB,OAAO,kBAACvG,EAAA,EAAM,CAACC,QAASgE,EAAMrD,SAASM,SAAWoF,EAAe,WAAa,OAC/D1C,QAAS,kBAAMuC,EAA2BG,IAC1CpG,MAAOA,GAAQqG,IAIlC,OAAO,kBAACC,GAAA,EAAK,CAAC3C,MAAO,CAAC4C,QAAS,OAAQrB,SAAU,aAC7C,kBAACzB,GAAA,EAAU,CACP0B,KAAM,QACNzB,QAjCe,WACnBnD,EAAiBwD,EAAMrD,SAAS5G,KAgCH+I,SAA0C,YAAhCkB,EAAMrD,SAASO,aAClD0C,MAAO,CAACuB,SAAU,WAAYG,MAAO,MAAOD,IAAK,QAEjD,kBAACE,GAAA,EAAM,CAACC,SAAU,WAEtB,4BACI,kBAACzB,GAAY,CAAClH,MAAOmH,EAAMrD,SAAS9G,MAAOuJ,SAAU6C,KAEzD,kBAACvD,GAAW,CAACG,QAASgD,EAAiB/C,SAA0C,YAAhCkB,EAAMrD,SAASO,eAChE,6BAEQiF,EAAiBhF,KAAI,SAAAY,GAAC,OAAI,kBAACyC,GAAI,CAACS,IAAKlD,EAAEhI,GAAI8H,KAAME,EAAG7H,WAAY8J,EAAMrD,SAAS5G,SAEjFoM,EAAiB9K,QAAU,yBAAKuI,MAAO,CAAC4C,QAAS,OAAQvG,MAAO,SAAQ,YAE9E,yBAAK2D,MAAO,CAAC6C,WAAY,SACpBL,EAAmB,MAAO,UAAW,OACrCA,EAAmB,SAAU,UAAW,UACxCA,EAAmB,YAAa,YAAa,kB,cCpG1D,mmGAAAxK,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAkBO,IAAM8K,GAAqC,SAAH,GAAwB,IAAD,IAAlBhB,YAAI,OAAQ,EACtDnF,EAAY9C,aAAyD,SAAAzE,GAAK,OAAIA,EAAMuH,aACpFgB,EAAQ9D,aAA8C,SAAAzE,GAAK,OAAIA,EAAMuI,SACrE7G,EAAa+C,YAAYjD,GAEzBU,EAAWgC,IAEVoD,EAAoBlD,EAAWuI,IAA/BrF,iBAEDqG,EAAsBhC,sBAAW,wCAAC,WAAO9K,EAAeiM,GAAmC,kFAC5C,OAA7CC,EAAQJ,GAAiBjF,cAAc7G,GAAM,SACtBqB,EAAS6K,GAAM,OAApC1H,EAAY,OAEdsH,GAAiBjF,cAAcpC,SAASxF,MAAMuF,IACtB,QAAxB,EAAIA,EAAazB,eAAO,OAAQ,QAAR,EAApB,EAAsBrB,cAAM,WAAR,EAApB,EAA8BF,SACxB2K,EAAmC,QAAvB,EAAG3H,EAAazB,eAAO,aAApB,EAAsBrB,OAAO,GAClDuK,EAAO7C,SAAS+C,IAEhBF,EAAO7C,SAAS,sBAGpB6C,EAAO9C,SAAS,IACnB,2CACJ,qDAdsC,GAcpC,CAAC9H,IASJ,OAPA0K,qBAAU,YACFF,GAAShL,GAGb4F,MACD,CAACoF,EAAKhL,EAAW4F,IAEf5F,EAIE,oCACH,kBAACgE,EAAA,EAAI,CAACC,WAAS,EAACiF,MAAO,CAAC4C,QAAS,SAC7B,kBAAC9D,GAAW,CAACG,QAAS8D,KAE1B,kBAACjI,EAAA,EAAI,CAACC,WAAS,EAACiI,QAAS,EAAGhD,MAAO,CAACiD,SAAU,SAAUC,UAAW,WAE3DvG,EAAUY,KAAI,SAAAH,GACV,IAAI+F,EAAmBxF,EAAMP,EAAGjH,IAEhC,OAAO,kBAAC2E,EAAA,EAAI,CAACG,MAAI,EAACoG,IAAKjE,EAAGjH,IACtB,yBAAK6J,MAAO,CAACoD,MAAO,UAChB,kBAACvB,GAAQ,CACL9E,SAAUK,EACVO,MAAOwF,EACPrB,KAAMA,WAjBvB,kBAAC,IAAQ,CAACjH,GAAI,YC/CvBkH,GAAgB,2BACfsB,IACAC,GAAe7J,SAGhBoH,GAAY,2BACX0C,IACAC,GAAW/J,SAGZgK,GAAmBH,GAAe/G,QAClCmH,GAAeF,GAAWjH,QCRnBoH,GAAcC,YAAgB,CACvCvO,IAAKoH,GACL5F,KAAMyF,GACNK,UAAW8G,GACX9F,MAAO+F,KAGEG,GAAQC,YAAe,CAChCvH,QAASoH,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,QAKvEnP,OAAO8O,MAAQA,G,gHCbTM,GAAQ,SAAC/D,GACX,OAAO,kBAAC,KAAQ,eAACgE,UAAW,EAAGhI,QAAQ,UAAagE,KAG3CiE,GAAgB,WACzB,IAAM9M,EAAQsC,aAA6C,SAAAzE,GAAK,OAAIA,EAAMC,IAAIkC,SACvEL,EAAesC,EAAWzC,GAA1BG,YAEDoN,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJtN,EAAY,CAACK,MAAO,QAGlBkN,EAAmB,OAAVlN,EAEf,OACI,kBAACmN,GAAA,EAAQ,CAACC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACrD,kBAAC,GAAK,CAACO,QAASP,EAAaQ,SAAS,SACjCvN,KCAJwN,GAAM,SAAH,GAAmC,IAAD,IAA7BjD,YAAI,OAAQ,EACvBxM,EAASuE,YAAY1E,GACrBK,EAAgBqE,YAAYtE,GAC5BuB,EAAa+C,YAAYmL,EAAcpO,kBAEtC2B,EAAUiB,EAAWgB,GAArBjC,OACAiE,EAAiBhD,EAAWzC,IAA5ByF,cAEPwF,qBAAU,WACDF,GACDtF,MAEL,CAACsF,EAAKtF,IAET,IAAMyI,EAAgBlE,uBAAY,WAC9BxI,MACD,CAACA,IAEJ,OAAK/C,EAQD,yBAAK8L,UAAU,OACX,kBAAC,GAAa,MACd,kBAAC4D,GAAA,EAAM,CAAC3D,SAAS,UACb,kBAAC4D,GAAA,EAAO,KACJ,kBAACrF,GAAA,EAAU,CAACsF,KAAK,QAAQ/I,MAAM,UAAUgJ,aAAW,QAChD,kBAACC,GAAA,EAAI,OAET,kBAACC,GAAA,EAAU,CAACnJ,QAAQ,MAAI,QAGvBtF,GAAc,kBAACqF,EAAA,EAAM,CAACE,MAAM,UAAU0D,QAASkF,GAAc,YAEtD,YAAX3P,GAAwB,kBAACkQ,GAAA,EAAc,OAE5C,kBAACC,GAAA,EAAS,CAACC,OAAK,GACZ,kBAAC,IAAK,CAACC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAa,CAAC/D,KAAMA,OAC3D,kBAAC,IAAK,CAAC8D,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAK,WAvB5C,yBACH7F,MAAO,CAACuB,SAAU,QAASE,IAAK,MAAOqE,UAAW,SAAU1C,MAAO,SACnE,kBAAC2C,GAAA,EAAgB,QCxC7BC,IAASH,OACL,kBAAC,IAAQ,CAAChC,MAAOA,IACb,kBAAC,KAAa,KACV,kBAAC,GAAG,QAECoC,SAASC,eAAe,SxB4HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlP,GACL8I,QAAQ9I,MAAMA,EAAMO,c","file":"static/js/main.cd9acd97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AppRootStateType} from '../../utils/types'\r\n\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f1636098-c65e-4218-94e5-e10509868ae3'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me');\r\n    }\r\n}\r\n\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('appActions/setAppStatus')\r\nconst setAppError = createAction<{ error: string | null }>('appActions/setAppError')\r\n\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from '../api/types'\r\n\r\n\r\n// original type:\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(param)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            return handleAsyncServerNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        const err = error as AxiosError\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\n\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n\r\n    return boundActions\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify='center'>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'} rel=\"noopener noreferrer\">here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type='password'\r\n                            label='Password'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = { status: RequestStatusType, error: string | null, isInitialized: boolean }\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>\r\n('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        const err = error as AxiosError\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist',\r\n    async (todolistId, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n        await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    })\r\n\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        const err = error as AxiosError\r\n        return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {id: param.id, title: param.title}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>\r\n('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        const err = error as AxiosError\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string },\r\n    ThunkError>('tasks/removeTask', async (param, thunkAPI) => {\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (\r\n    param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        const err = error as AxiosError\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId,removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId,updateTask])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId,updateTask])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color='primary'\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{position: 'absolute', top: '2px', right: '2px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [demo,fetchTasks,props.todolist.id])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id,dispatch])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [changeTodolistTitleTC, props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [changeTodolistFilter, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n            style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [demo,isLoggedIn,fetchTodolistsTC])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\n\r\nconst Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {authSelectors} from '../features/Auth'\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const App = ({demo = false}: PropsType) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [demo,initializeApp])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {App} from './app/App';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}