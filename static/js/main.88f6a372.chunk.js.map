{"version":3,"sources":["serviceWorker.ts","api/types.ts","features/Application/selectors.ts","api/todolists-api.ts","features/Auth/selectors.tsx","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","app/selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/index.tsx","app/reducers.ts","app/store.ts","app/App.tsx","index.tsx","features/CommonActions/App.ts","utils/index.ts","utils/error-utils.ts","utils/redux-utils.ts"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","selectStatus","state","app","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","selectIsLoggedIn","auth","isLoggedIn","setAppStatus","appActions","login","createAsyncThunk","param","thunkAPI","a","dispatch","res","resultCode","handleAsyncServerAppError","handleAsyncServerNetworkError","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","reducer","actions","Login","useAppDispatch","useSelector","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","fieldsErrors","length","error","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","errors","type","FormControlLabel","control","Checkbox","checked","Button","variant","color","authReducer","initializeApp","setAppError","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","rejectWithValue","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","messages","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","style","marginLeft","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","selectError","Alert","elevation","ErrorSnackbar","useActions","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","TodolistsList","demo","todolistsActions","addTodolistCallback","useCallback","helper","thunk","errorMessage","useEffect","padding","spacing","flexWrap","overflowX","allTodolistTasks","key","width","Todolist","Task","tasksActions","onClickHandler","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","className","position","size","top","right","fontSize","addTaskCallback","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","paddingTop","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","createAction","showError","undefined","useDispatch","useMemo","bindActionCreators"],"mappings":"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","file":"static/js/main.88f6a372.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {AppRootStateType} from 'utils'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f1636098-c65e-4218-94e5-e10509868ae3'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}\r\n\r\n","import {AppRootStateType} from 'utils'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {authAPI} from 'api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from 'utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from 'api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login',\r\n    async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from 'collections-mui'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from 'utils'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n    return <Grid container justify='center'>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type='password'\r\n                            label='Password'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n\r\n\r\n","import {authAPI} from 'api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import {todolistsAPI} from 'api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,ThunkError} from 'utils'\r\nimport {TodolistType} from 'api/types'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>\r\n('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>\r\n('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from 'api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,\r\n    AppRootStateType, ThunkError} from 'utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from 'api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>\r\n('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string },\r\n    ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask',\r\n    async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n           thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField, AddBox} from 'collections-mui'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant='outlined'\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label='Title'\r\n                   helperText={error}\r\n        />\r\n        <IconButton color='primary' onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport {TextField} from 'collections-mui'\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import {AppRootStateType} from 'utils'\r\n\r\nexport const selectError = (state: AppRootStateType) => state.app.error","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from 'features/CommonActions/App'\r\nimport {useActions} from 'utils'\r\nimport {selectError} from 'app/selectors'\r\n\r\nconst Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector(selectError)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from 'collections-mui'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from 'components'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {Todolist, todolistsActions} from './index'\r\nimport {AppRootStateType, useActions, useAppDispatch} from 'utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        if (!todolists.length) {\r\n            fetchTodolistsTC()\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton, Delete} from 'collections-mui'\r\nimport {EditableSpan} from 'components'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from 'api/types'\r\nimport {useActions} from 'utils'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType, EditableSpan} from 'components'\r\nimport {PropTypes} from '@material-ui/core'\r\nimport {Delete, IconButton, Button, Paper} from 'collections-mui'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {Task, tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from 'api/types'\r\nimport {useActions, useAppDispatch} from 'utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length) {\r\n            fetchTasks(props.todolist.id)\r\n        }\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n\r\nexport {Task} from './Todolist/Task/Task'\r\nexport {Todolist} from './Todolist/Todolist'","import {combineReducers} from 'redux'\r\nimport {appReducer} from 'features/Application'\r\nimport {authReducer} from 'features/Auth'\r\nimport {tasksReducer, todolistsReducer} from 'features/TodolistsList'\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n","import thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from './reducers'\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n        store.replaceReducer(rootReducer)\r\n    })\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography,\r\n    Menu\r\n} from 'collections-mui'\r\nimport {TodolistsList} from 'features/TodolistsList'\r\nimport {ErrorSnackbar} from 'components'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from 'features/Application'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, Login, authSelectors} from 'features/Auth'\r\nimport {selectIsInitialized, selectStatus} from 'features/Application/selectors'\r\nimport {useActions} from 'utils'\r\n\r\ntype PropsType = {}\r\n\r\nexport const App = (props: PropsType) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            initializeApp()\r\n        }\r\n    }, []);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {store} from 'app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {App} from 'app/App'\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>, document.getElementById('root'))\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderEntireTree();\r\n    })\r\n}\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","export * from './error-utils'\r\nexport * from './redux-utils'\r\nexport * from './types'","import {appActions} from 'features/CommonActions/App'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from 'api/types'\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n"],"sourceRoot":""}