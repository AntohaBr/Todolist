{"version":3,"sources":["serviceWorker.ts","features/Application/selectors.ts","api/todolists-api.ts","features/Auth/selectors.tsx","features/CommonActions/App.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","utils/redux-utils.ts","api/types.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx","features/Auth/Login.module.css","features/TodolistsList/TodolistsList.module.css","features/TodolistsList/Todolist/Task/Task.module.css","features/TodolistsList/Todolist/Todolist.module.css"],"names":["Boolean","window","location","hostname","match","selectStatus","state","app","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","selectIsLoggedIn","auth","isLoggedIn","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","reducer","actions","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","Login","useSelector","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","className","s","loginContainer","loginForm","handleSubmit","FormControl","FormLabel","loginFormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","style","color","type","FormControlLabel","control","Checkbox","checked","Button","variant","marginTop","authReducer","initializeApp","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","key","taskContainer","padding","editableSpan","size","position","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","todolistTitle","paddingTop","TodolistsList","addTodolistCallback","addTodolistContainer","todolistsContainer","allTodolistTasks","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","authSelectors","logoutHandler","AppBar","Toolbar","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.232e1505.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AppRootStateType} from 'utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me');\r\n    }\r\n}\r\n\r\n","import {AppRootStateType} from 'utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {AxiosError} from 'axios'\r\nimport {ResponseType} from 'api/types'\r\nimport {appActions} from 'features/CommonActions/App'\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {authAPI} from 'api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from 'utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from 'api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login',\r\n    async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldErrorType = { field: string; error: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from 'utils/redux-utils'\r\nimport s from './Login.module.css'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <div className={s.loginContainer}>\r\n        <div className={s.loginForm}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel className={s.loginFormLabel}>\r\n                        <p>To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                       target={'_blank'}><b>here</b></a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p><b>Email: free@samuraijs.com</b></p>\r\n                        <p><b>Password: free</b></p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type='password'\r\n                            label='Password'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}\r\n                                style={{marginTop: 30}}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from 'api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import {todolistsAPI} from 'api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from 'utils/error-utils'\r\nimport {TodolistType} from 'api/types'\r\nimport {ThunkError} from 'utils/types'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>\r\n('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist',\r\n    async (todolistId, {dispatch}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from 'api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from 'utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from 'utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from 'api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>\r\n('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string },\r\n    ThunkError>('tasks/removeTask', async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask',\r\n    async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n           thunkAPI) => {\r\n        const state = thunkAPI.getState() as AppRootStateType\r\n\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue('task not found in the state')\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...param.model\r\n        }\r\n\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from 'components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from 'api/types'\r\nimport {useActions} from 'utils/redux-utils'\r\nimport s from './Task.module.css'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id}\r\n                className={`${props.task.status === TaskStatuses.Completed ? 'is-done' : ''} ${s.taskContainer}`}>\r\n        <div>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color='primary'\r\n                onChange={onChangeHandler}\r\n                style={{padding: '10px 5px 0px 0px'}}\r\n            />\r\n        </div>\r\n        <p className={s.editableSpan}>\r\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        </p>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{position: 'absolute', top: '8px', right: '2px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from 'components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from 'components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from 'api/types'\r\nimport {useActions, useAppDispatch} from 'utils/redux-utils'\r\nimport s from './Todolist.module.css'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '30px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3 className={s.todolistTitle}>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from 'components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {todolistsActions} from './index'\r\nimport {AppRootStateType} from 'utils/types'\r\nimport {useActions, useAppDispatch} from 'utils/redux-utils'\r\nimport s from './TodolistsList.module.css'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <div className={s.addTodolistContainer}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </div>\r\n        <div className={s.todolistsContainer}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <div key={tl.id}>\r\n                        <div className={s.todolist}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from 'features/Application'\r\nimport {authReducer} from 'features/Auth'\r\nimport {tasksReducer, todolistsReducer} from 'features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from 'features/CommonActions/App'\r\nimport {AppRootStateType} from 'utils/types'\r\nimport {useActions} from 'utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, CircularProgress, Container, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {TodolistsList} from 'features/TodolistsList'\r\nimport {ErrorSnackbar} from 'components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from 'features/Application'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, Login} from 'features/Auth'\r\nimport {selectIsInitialized, selectStatus} from 'features/Application/selectors'\r\nimport {authSelectors} from '../features/Auth'\r\nimport {useActions} from 'utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App = ({demo = false}: PropsType) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className='App'>\r\n                <ErrorSnackbar/>\r\n                <AppBar position='static'>\r\n                    <Toolbar className='toolbar'>\r\n                        <Typography variant=\"h6\">\r\n                            Todolist\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {store} from 'app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {App} from 'app/App'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2JuUz\",\"loginForm\":\"Login_loginForm__20Cn6\",\"loginFormLabel\":\"Login_loginFormLabel__iBWbe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTodolistContainer\":\"TodolistsList_addTodolistContainer__2oL5n\",\"todolistsContainer\":\"TodolistsList_todolistsContainer__2YTQx\",\"todolist\":\"TodolistsList_todolist__3WI_3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskContainer\":\"Task_taskContainer__oHIhc\",\"editableSpan\":\"Task_editableSpan__1ZxSb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistTitle\":\"Todolist_todolistTitle__Qztut\"};"],"sourceRoot":""}